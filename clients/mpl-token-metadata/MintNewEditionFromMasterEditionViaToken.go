// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mpl_token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintNewEditionFromMasterEditionViaToken is the `MintNewEditionFromMasterEditionViaToken` instruction.
type MintNewEditionFromMasterEditionViaToken struct {
	MintNewEditionFromMasterEditionViaTokenArgs *MintNewEditionFromMasterEditionViaTokenArgs

	// [0] = [WRITE] newMetadata
	//
	// [1] = [WRITE] newEdition
	//
	// [2] = [WRITE] masterEdition
	//
	// [3] = [WRITE] newMint
	//
	// [4] = [WRITE] editionMarkPda
	//
	// [5] = [SIGNER] newMintAuthority
	//
	// [6] = [SIGNER] payer
	//
	// [7] = [SIGNER] tokenAccountOwner
	//
	// [8] = [] tokenAccount
	//
	// [9] = [] newMetadataUpdateAuthority
	//
	// [10] = [] metadata
	//
	// [11] = [] tokenProgram
	//
	// [12] = [] systemProgram
	//
	// [13] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintNewEditionFromMasterEditionViaTokenInstructionBuilder creates a new `MintNewEditionFromMasterEditionViaToken` instruction builder.
func NewMintNewEditionFromMasterEditionViaTokenInstructionBuilder() *MintNewEditionFromMasterEditionViaToken {
	nd := &MintNewEditionFromMasterEditionViaToken{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 14),
	}
	return nd
}

// SetMintNewEditionFromMasterEditionViaTokenArgs sets the "mintNewEditionFromMasterEditionViaTokenArgs" parameter.
func (inst *MintNewEditionFromMasterEditionViaToken) SetMintNewEditionFromMasterEditionViaTokenArgs(mintNewEditionFromMasterEditionViaTokenArgs MintNewEditionFromMasterEditionViaTokenArgs) *MintNewEditionFromMasterEditionViaToken {
	inst.MintNewEditionFromMasterEditionViaTokenArgs = &mintNewEditionFromMasterEditionViaTokenArgs
	return inst
}

// SetNewMetadataAccount sets the "newMetadata" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetNewMetadataAccount(newMetadata ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(newMetadata).WRITE()
	return inst
}

// GetNewMetadataAccount gets the "newMetadata" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetNewMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNewEditionAccount sets the "newEdition" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetNewEditionAccount(newEdition ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(newEdition).WRITE()
	return inst
}

// GetNewEditionAccount gets the "newEdition" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetNewEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewMintAccount sets the "newMint" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetNewMintAccount(newMint ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newMint).WRITE()
	return inst
}

// GetNewMintAccount gets the "newMint" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetNewMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetEditionMarkPdaAccount sets the "editionMarkPda" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetEditionMarkPdaAccount(editionMarkPda ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(editionMarkPda).WRITE()
	return inst
}

// GetEditionMarkPdaAccount gets the "editionMarkPda" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetEditionMarkPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetNewMintAuthorityAccount sets the "newMintAuthority" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetNewMintAuthorityAccount(newMintAuthority ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(newMintAuthority).SIGNER()
	return inst
}

// GetNewMintAuthorityAccount gets the "newMintAuthority" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetNewMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetPayerAccount sets the "payer" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetPayerAccount(payer ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetTokenAccountOwnerAccount sets the "tokenAccountOwner" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetTokenAccountOwnerAccount(tokenAccountOwner ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(tokenAccountOwner).SIGNER()
	return inst
}

// GetTokenAccountOwnerAccount gets the "tokenAccountOwner" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetTokenAccountOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenAccount)
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetNewMetadataUpdateAuthorityAccount sets the "newMetadataUpdateAuthority" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetNewMetadataUpdateAuthorityAccount(newMetadataUpdateAuthority ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(newMetadataUpdateAuthority)
	return inst
}

// GetNewMetadataUpdateAuthorityAccount gets the "newMetadataUpdateAuthority" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetNewMetadataUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetMetadataAccount(metadata ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(metadata)
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetRentAccount sets the "rent" account.
func (inst *MintNewEditionFromMasterEditionViaToken) SetRentAccount(rent ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *MintNewEditionFromMasterEditionViaToken) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

func (inst MintNewEditionFromMasterEditionViaToken) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintNewEditionFromMasterEditionViaToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintNewEditionFromMasterEditionViaToken) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintNewEditionFromMasterEditionViaToken) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MintNewEditionFromMasterEditionViaTokenArgs == nil {
			return errors.New("MintNewEditionFromMasterEditionViaTokenArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.NewMetadata is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NewEdition is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.EditionMarkPda is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.NewMintAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.TokenAccountOwner is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.NewMetadataUpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *MintNewEditionFromMasterEditionViaToken) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintNewEditionFromMasterEditionViaToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MintNewEditionFromMasterEditionViaTokenArgs", *inst.MintNewEditionFromMasterEditionViaTokenArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=14]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               newMetadata", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                newEdition", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             masterEdition", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                   newMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("            editionMarkPda", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("          newMintAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                     payer", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         tokenAccountOwner", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                     token", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("newMetadataUpdateAuthority", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                  metadata", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("              tokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("             systemProgram", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("                      rent", inst.AccountMetaSlice.Get(13)))
					})
				})
		})
}

func (obj MintNewEditionFromMasterEditionViaToken) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MintNewEditionFromMasterEditionViaTokenArgs` param:
	err = encoder.Encode(obj.MintNewEditionFromMasterEditionViaTokenArgs)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintNewEditionFromMasterEditionViaToken) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MintNewEditionFromMasterEditionViaTokenArgs`:
	err = decoder.Decode(&obj.MintNewEditionFromMasterEditionViaTokenArgs)
	if err != nil {
		return err
	}
	return nil
}

// NewMintNewEditionFromMasterEditionViaTokenInstruction declares a new MintNewEditionFromMasterEditionViaToken instruction with the provided parameters and accounts.
func NewMintNewEditionFromMasterEditionViaTokenInstruction(
	// Parameters:
	mintNewEditionFromMasterEditionViaTokenArgs MintNewEditionFromMasterEditionViaTokenArgs,
	// Accounts:
	newMetadata ag_solanago.PublicKey,
	newEdition ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	newMint ag_solanago.PublicKey,
	editionMarkPda ag_solanago.PublicKey,
	newMintAuthority ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenAccountOwner ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	newMetadataUpdateAuthority ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *MintNewEditionFromMasterEditionViaToken {
	return NewMintNewEditionFromMasterEditionViaTokenInstructionBuilder().
		SetMintNewEditionFromMasterEditionViaTokenArgs(mintNewEditionFromMasterEditionViaTokenArgs).
		SetNewMetadataAccount(newMetadata).
		SetNewEditionAccount(newEdition).
		SetMasterEditionAccount(masterEdition).
		SetNewMintAccount(newMint).
		SetEditionMarkPdaAccount(editionMarkPda).
		SetNewMintAuthorityAccount(newMintAuthority).
		SetPayerAccount(payer).
		SetTokenAccountOwnerAccount(tokenAccountOwner).
		SetTokenAccountAccount(tokenAccount).
		SetNewMetadataUpdateAuthorityAccount(newMetadataUpdateAuthority).
		SetMetadataAccount(metadata).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
