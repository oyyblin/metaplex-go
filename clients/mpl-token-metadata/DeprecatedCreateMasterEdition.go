// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package mpl_token_metadata

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DeprecatedCreateMasterEdition is the `DeprecatedCreateMasterEdition` instruction.
type DeprecatedCreateMasterEdition struct {
	CreateMasterEditionArgs *CreateMasterEditionArgs

	// [0] = [WRITE] edition
	//
	// [1] = [WRITE] mint
	//
	// [2] = [WRITE] printingMint
	//
	// [3] = [WRITE] oneTimePrintingAuthorizationMint
	//
	// [4] = [SIGNER] updateAuthority
	//
	// [5] = [SIGNER] printingMintAuthority
	//
	// [6] = [SIGNER] mintAuthority
	//
	// [7] = [] metadata
	//
	// [8] = [SIGNER] payer
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] systemProgram
	//
	// [11] = [] rent
	//
	// [12] = [SIGNER] oneTimePrintingAuthorizationMintAuthority
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDeprecatedCreateMasterEditionInstructionBuilder creates a new `DeprecatedCreateMasterEdition` instruction builder.
func NewDeprecatedCreateMasterEditionInstructionBuilder() *DeprecatedCreateMasterEdition {
	nd := &DeprecatedCreateMasterEdition{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetCreateMasterEditionArgs sets the "createMasterEditionArgs" parameter.
func (inst *DeprecatedCreateMasterEdition) SetCreateMasterEditionArgs(createMasterEditionArgs CreateMasterEditionArgs) *DeprecatedCreateMasterEdition {
	inst.CreateMasterEditionArgs = &createMasterEditionArgs
	return inst
}

// SetEditionAccount sets the "edition" account.
func (inst *DeprecatedCreateMasterEdition) SetEditionAccount(edition ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(edition).WRITE()
	return inst
}

// GetEditionAccount gets the "edition" account.
func (inst *DeprecatedCreateMasterEdition) GetEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMintAccount sets the "mint" account.
func (inst *DeprecatedCreateMasterEdition) SetMintAccount(mint ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *DeprecatedCreateMasterEdition) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPrintingMintAccount sets the "printingMint" account.
func (inst *DeprecatedCreateMasterEdition) SetPrintingMintAccount(printingMint ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(printingMint).WRITE()
	return inst
}

// GetPrintingMintAccount gets the "printingMint" account.
func (inst *DeprecatedCreateMasterEdition) GetPrintingMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOneTimePrintingAuthorizationMintAccount sets the "oneTimePrintingAuthorizationMint" account.
func (inst *DeprecatedCreateMasterEdition) SetOneTimePrintingAuthorizationMintAccount(oneTimePrintingAuthorizationMint ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(oneTimePrintingAuthorizationMint).WRITE()
	return inst
}

// GetOneTimePrintingAuthorizationMintAccount gets the "oneTimePrintingAuthorizationMint" account.
func (inst *DeprecatedCreateMasterEdition) GetOneTimePrintingAuthorizationMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetUpdateAuthorityAccount sets the "updateAuthority" account.
func (inst *DeprecatedCreateMasterEdition) SetUpdateAuthorityAccount(updateAuthority ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(updateAuthority).SIGNER()
	return inst
}

// GetUpdateAuthorityAccount gets the "updateAuthority" account.
func (inst *DeprecatedCreateMasterEdition) GetUpdateAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetPrintingMintAuthorityAccount sets the "printingMintAuthority" account.
func (inst *DeprecatedCreateMasterEdition) SetPrintingMintAuthorityAccount(printingMintAuthority ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(printingMintAuthority).SIGNER()
	return inst
}

// GetPrintingMintAuthorityAccount gets the "printingMintAuthority" account.
func (inst *DeprecatedCreateMasterEdition) GetPrintingMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *DeprecatedCreateMasterEdition) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(mintAuthority).SIGNER()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *DeprecatedCreateMasterEdition) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *DeprecatedCreateMasterEdition) SetMetadataAccount(metadata ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(metadata)
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *DeprecatedCreateMasterEdition) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetPayerAccount sets the "payer" account.
func (inst *DeprecatedCreateMasterEdition) SetPayerAccount(payer ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *DeprecatedCreateMasterEdition) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DeprecatedCreateMasterEdition) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DeprecatedCreateMasterEdition) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *DeprecatedCreateMasterEdition) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *DeprecatedCreateMasterEdition) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *DeprecatedCreateMasterEdition) SetRentAccount(rent ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *DeprecatedCreateMasterEdition) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetOneTimePrintingAuthorizationMintAuthorityAccount sets the "oneTimePrintingAuthorizationMintAuthority" account.
func (inst *DeprecatedCreateMasterEdition) SetOneTimePrintingAuthorizationMintAuthorityAccount(oneTimePrintingAuthorizationMintAuthority ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(oneTimePrintingAuthorizationMintAuthority).SIGNER()
	return inst
}

// GetOneTimePrintingAuthorizationMintAuthorityAccount gets the "oneTimePrintingAuthorizationMintAuthority" account.
func (inst *DeprecatedCreateMasterEdition) GetOneTimePrintingAuthorizationMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst DeprecatedCreateMasterEdition) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DeprecatedCreateMasterEdition,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DeprecatedCreateMasterEdition) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DeprecatedCreateMasterEdition) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CreateMasterEditionArgs == nil {
			return errors.New("CreateMasterEditionArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Edition is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PrintingMint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OneTimePrintingAuthorizationMint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.UpdateAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.PrintingMintAuthority is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.OneTimePrintingAuthorizationMintAuthority is not set")
		}
	}
	return nil
}

func (inst *DeprecatedCreateMasterEdition) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DeprecatedCreateMasterEdition")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CreateMasterEditionArgs", *inst.CreateMasterEditionArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                                  edition", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                                     mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                             printingMint", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         oneTimePrintingAuthorizationMint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                          updateAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                    printingMintAuthority", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                            mintAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                                 metadata", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                                    payer", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                             tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                            systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                                     rent", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("oneTimePrintingAuthorizationMintAuthority", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj DeprecatedCreateMasterEdition) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CreateMasterEditionArgs` param:
	err = encoder.Encode(obj.CreateMasterEditionArgs)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DeprecatedCreateMasterEdition) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CreateMasterEditionArgs`:
	err = decoder.Decode(&obj.CreateMasterEditionArgs)
	if err != nil {
		return err
	}
	return nil
}

// NewDeprecatedCreateMasterEditionInstruction declares a new DeprecatedCreateMasterEdition instruction with the provided parameters and accounts.
func NewDeprecatedCreateMasterEditionInstruction(
	// Parameters:
	createMasterEditionArgs CreateMasterEditionArgs,
	// Accounts:
	edition ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	printingMint ag_solanago.PublicKey,
	oneTimePrintingAuthorizationMint ag_solanago.PublicKey,
	updateAuthority ag_solanago.PublicKey,
	printingMintAuthority ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	metadata ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	oneTimePrintingAuthorizationMintAuthority ag_solanago.PublicKey) *DeprecatedCreateMasterEdition {
	return NewDeprecatedCreateMasterEditionInstructionBuilder().
		SetCreateMasterEditionArgs(createMasterEditionArgs).
		SetEditionAccount(edition).
		SetMintAccount(mint).
		SetPrintingMintAccount(printingMint).
		SetOneTimePrintingAuthorizationMintAccount(oneTimePrintingAuthorizationMint).
		SetUpdateAuthorityAccount(updateAuthority).
		SetPrintingMintAuthorityAccount(printingMintAuthority).
		SetMintAuthorityAccount(mintAuthority).
		SetMetadataAccount(metadata).
		SetPayerAccount(payer).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetOneTimePrintingAuthorizationMintAuthorityAccount(oneTimePrintingAuthorizationMintAuthority)
}
